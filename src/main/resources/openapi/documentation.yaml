openapi: 3.0.1
info:
  title: Example Ktor API
  version: 1.0.0
  description: API для управления пользователями и файлами с аутентификацией через JWT
  contact:
    name: API Support
    email: support@example.com

servers:
  - url: http://localhost
    description: Локальный сервер разработки

paths:
  ## — Публичные (без JWT) — ##
  /register/local:
    post:
      tags: [Authentication]
      summary: Регистрация по email и паролю
      operationId: registerLocal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUser'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /register/other:
    post:
      tags: [Authentication]
      summary: Регистрация через OAuth
      operationId: registerOAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterUserWithOAuth'
      responses:
        '200':
          description: Успешная регистрация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'

  /login/local:
    post:
      tags: [Authentication]
      summary: Локальный вход по email и паролю
      operationId: loginLocal
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUser'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /login/other:
    post:
      tags: [Authentication]
      summary: Вход через OAuth
      operationId: loginOAuth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserOAuth'
      responses:
        '200':
          description: Успешная аутентификация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokens'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /get_otp_code:
    post:
      tags: [Password Recovery]
      summary: Отправка OTP-кода для сброса пароля
      operationId: sendOtpCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordEmail'
      responses:
        '200':
          description: Код успешно отправлен
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  /check_otp_code:
    post:
      tags: [Password Recovery]
      summary: Проверка OTP-кода
      operationId: verifyOtpCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordOtp'
      responses:
        '200':
          description: Код валиден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordToken'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /reset_password:
    patch:
      tags: [Password Recovery]
      summary: Установка нового пароля
      operationId: resetPassword
      parameters:
        - $ref: '#/components/parameters/ResetPasswordTokenHeader'
      security:
        - resetPasswordToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordNew'
      responses:
        '200':
          description: Пароль успешно изменён
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/ServerError'

  ## — Защищённые JWT-маршруты — ##
  /refresh:
    get:
      tags: [Authentication]
      summary: Обновление access-токена
      operationId: refreshToken
      parameters:
        - $ref: '#/components/parameters/RefreshTokenHeader'
      security:
        - refreshToken: []
      responses:
        '200':
          description: Новый access-токен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessToken'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /jwt/test:
    get:
      tags: [Authentication]
      summary: Тест JWT-аутентификации
      operationId: testJwt
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
      security:
        - accessToken: []
      responses:
        '200':
          description: Успешная проверка
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserIdResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /create:
    post:
      tags: [Items]
      summary: Создание нового объекта
      operationId: createItem
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateObject'
      responses:
        '201':
          description: Объект успешно создан
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /upload:
    post:
      tags: [Items]
      summary: Загрузка файла
      operationId: uploadFile
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                metadata:
                  type: string
                  description: JSON метаданных файла
                file:
                  type: string
                  format: binary
                  description: Файл для загрузки
      responses:
        '200':
          description: Файл успешно загружен
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  uid:
                    type: string
                    format: uuid
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/ServerError'

  /items/download/{uid}:
    get:
      tags: [Items]
      summary: Скачивание файла
      operationId: downloadItem
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - accessToken: []
      responses:
        '200':
          description: URL для скачивания
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DownloadUrl'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /update/{uid}:
    put:
      tags: [Items]
      summary: Обновление объекта
      operationId: updateItem
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - accessToken: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/TextUpdateRequest'
                - $ref: '#/components/schemas/MetadataUpdateRequest'
              discriminator:
                propertyName: type
                mapping:
                  text: '#/components/schemas/TextUpdateRequest'
                  metadata: '#/components/schemas/MetadataUpdateRequest'
      responses:
        '200':
          description: Успешное обновление
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /items:
    get:
      tags: [Items]
      summary: Список объектов пользователя
      operationId: listItems
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
      security:
        - accessToken: []
      responses:
        '200':
          description: Список объектов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageItemResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /items/{uid}:
    get:
      tags: [Items]
      summary: Получение информации об объекте
      operationId: getItem
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - accessToken: []
      responses:
        '200':
          description: Информация об объекте
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemContent'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'

  /items/deleted:
    get:
      tags: [Items]
      summary: Список удалённых объектов
      operationId: listDeletedItems
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
      security:
        - accessToken: []
      responses:
        '200':
          description: Список удалённых объектов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StorageItemResponse'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /items/{uid}/soft_delete:
    patch:
      tags: [Items]
      summary: Мягкое удаление объекта
      operationId: softDeleteItem
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - accessToken: []
      responses:
        '200':
          description: Объект помечен как удалённый
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /items/{uid}/delete_permanent:
    delete:
      tags: [Items]
      summary: Полное удаление объекта
      operationId: deleteItemPermanently
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - accessToken: []
      responses:
        '200':
          description: Объект полностью удалён
          content:
            application/json:
              schema:
                type: object
                properties:
                  uid:
                    type: string
                    format: uuid
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /items/{uid}/restore:
    patch:
      tags: [Items]
      summary: Восстановление объекта
      operationId: restoreItem
      parameters:
        - $ref: '#/components/parameters/AccessTokenHeader'
        - name: uid
          in: path
          required: true
          schema:
            type: string
            format: uuid
      security:
        - accessToken: []
      responses:
        '200':
          description: Объект успешно восстановлен
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

components:
  securitySchemes:
    accessToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Access token для аутентификации
    refreshToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Refresh token для обновления access token
    resetPasswordToken:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Временный токен для сброса пароля

  parameters:
    AccessTokenHeader:
      name: Authorization
      in: header
      description: Bearer access token
      required: true
      schema:
        type: string
        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    RefreshTokenHeader:
      name: Authorization
      in: header
      description: Bearer refresh token
      required: true
      schema:
        type: string
        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
    ResetPasswordTokenHeader:
      name: Authorization
      in: header
      description: Bearer token для сброса пароля
      required: true
      schema:
        type: string
        example: "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."

  responses:
    BadRequest:
      description: Неверный запрос
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    Unauthorized:
      description: Неавторизованный доступ
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    NotFound:
      description: Ресурс не найден
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    Conflict:
      description: Конфликт данных
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
    ServerError:
      description: Ошибка сервера
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string

  schemas:
    AuthTokens:
      type: object
      properties:
        token:
          type: string
          description: Access token
        refresh_token:
          type: string
          description: Refresh token
      required:
        - token
        - refresh_token

    AccessToken:
      type: object
      properties:
        token:
          type: string
          description: Новый access token
      required:
        - token

    UserIdResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
      required:
        - userId

    ResetPasswordToken:
      type: object
      properties:
        token:
          type: string
          description: Временный токен для сброса пароля
      required:
        - token

    DownloadUrl:
      type: object
      properties:
        url:
          type: string
          description: URL для скачивания файла
        size:
          type: integer
          description: Размер файла в байтах
      required:
        - url
        - size

    # Все остальные схемы остаются без изменений
    # (RegisterUser, RegisterUserWithOAuth, LoginUser, LoginUserOAuth и т.д.)
    # ...
    RegisterUser:
      type: object
      properties:
        username:
          type: string
        userEmail:
          type: string
          format: email
          nullable: true
        password:
          type: string
      required:
        - username
        - password

    RegisterUserWithOAuth:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
          nullable: true
        type:
          type: string
        accountId:
          type: string
      required:
        - username
        - type
        - accountId

    LoginUser:
      type: object
      properties:
        userEmail:
          type: string
          format: email
        password:
          type: string
      required:
        - userEmail
        - password

    LoginUserOAuth:
      type: object
      properties:
        accountId:
          type: string
        type:
          type: string
      required:
        - accountId
        - type

    ResetPasswordEmail:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email

    ResetPasswordOtp:
      type: object
      properties:
        otp:
          type: string
        userEmail:
          type: string
          format: email
      required:
        - otp
        - userEmail

    ResetPasswordNew:
      type: object
      properties:
        newPassword:
          type: string
      required:
        - newPassword

    CreateObject:
      type: object
      properties:
        type:
          type: string
        data:
          $ref: '#/components/schemas/ItemObject'
      required:
        - type
        - data

    ItemObject:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        parent_id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
      required:
        - uid
        - name

    UpdateObject:
      type: object
      properties:
        type:
          type: string
        data:
          $ref: '#/components/schemas/UpdateItem'
      required:
        - type
        - data

    UpdateObjectWithVersion:
      type: object
      properties:
        name:
          type: string
        parentId:
          type: string
          format: uuid
          nullable: true
        version:
          type: string
        baseline:
          type: string
        modifiedText:
          type: string
        type:
          type: string
      required:
        - name
        - version
        - baseline
        - modifiedText
        - type

    UpdateItem:
      type: object
      properties:
        fileContent:
          type: string
          nullable: true
        name:
          type: string
          nullable: true
        parent_id:
          type: string
          format: uuid
          nullable: true

    StorageItemResponse:
      type: object
      properties:
        uid:
          type: string
          format: uuid
        parent_id:
          type: string
          format: uuid
          nullable: true
        name:
          type: string
        type:
          type: string
        version:
          type: string
        created_at:
          type: integer
        updated_at:
          type: integer
        deleted_at:
          type: integer
          nullable: true
      required:
        - uid
        - name
        - type
        - created_at
        - updated_at

    ItemContent:
      type: object
      properties:
        version:
          type: string
        content:
          type: string
      required:
        - version
        - content

    UpdateRequest:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type

    TextUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/UpdateRequest'
        - type: object
          properties:
            type:
              type: string
              enum: [ 'text' ]
            version:
              type: string
              nullable: true
            baseline:
              type: string
            content:
              type: string
          required:
            - type
            - baseline
            - content
          example:
            type: text
            version: "not same version"
            baseline: ""
            content: "New and new here content\nfor file some new text that should be added to "

    MetadataUpdateRequest:
      allOf:
        - $ref: '#/components/schemas/UpdateRequest'
        - type: object
          properties:
            type:
              type: string
              enum: [ 'metadata' ]
            name:
              type: string
              nullable: true
            parentUid:
              type: string
              format: uuid
              nullable: true
          required:
            - type
          example:
            type: metadata
            name: "Новый заголовок"
            parentUid: "3fa85f64-5717-4562-b3fc-2c963f66afa6"